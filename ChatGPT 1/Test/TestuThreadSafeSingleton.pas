unit TestuThreadSafeSingleton;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, System.SyncObjs, System.Generics.Collections, System.SysUtils,
  uThreadSafeSingleton, System.Classes;

type
  // Test methods for class TThreadSafeSingleton

  TestTThreadSafeSingleton = class(TTestCase)
  strict private
    FThreadSafeSingleton: TThreadSafeSingleton;
  public
//    procedure SetUp; override;
//    procedure TearDown; override;
  published
    procedure TestDUnit;
//    procedure TestInstance;
//    procedure TestAddToken;
//    procedure TestRemoveToken;
//    procedure TestTokenExists;
//    procedure TestGetTokenCount;
//    procedure TestContainsToken;
  end;

implementation

//procedure TestTThreadSafeSingleton.SetUp;
//begin
//  FThreadSafeSingleton := TThreadSafeSingleton.Create;
//end;
//
//procedure TestTThreadSafeSingleton.TearDown;
//begin
//  FThreadSafeSingleton.Free;
//  FThreadSafeSingleton := nil;
//end;
//
//procedure TestTThreadSafeSingleton.TestInstance;
//var
//  ReturnValue: TThreadSafeSingleton;
//begin
//  ReturnValue := FThreadSafeSingleton.Instance;
//  // TODO: Validate method results
//end;
//
//procedure TestTThreadSafeSingleton.TestAddToken;
//var
//  AToken: string;
//begin
//  // TODO: Setup method call parameters
//  FThreadSafeSingleton.AddToken(AToken);
//  // TODO: Validate method results
//end;
//
//procedure TestTThreadSafeSingleton.TestRemoveToken;
//var
//  AToken: string;
//begin
//  // TODO: Setup method call parameters
//  FThreadSafeSingleton.RemoveToken(AToken);
//  // TODO: Validate method results
//end;
//
//procedure TestTThreadSafeSingleton.TestTokenExists;
//var
//  ReturnValue: Boolean;
//  AToken: string;
//begin
//  // TODO: Setup method call parameters
//  ReturnValue := FThreadSafeSingleton.TokenExists(AToken);
//  // TODO: Validate method results
//end;
//
//procedure TestTThreadSafeSingleton.TestGetTokenCount;
//var
//  ReturnValue: Integer;
//begin
//  ReturnValue := FThreadSafeSingleton.GetTokenCount;
//  // TODO: Validate method results
//end;
//
//procedure TestTThreadSafeSingleton.TestContainsToken;
//var
//  ReturnValue: Boolean;
//  Token: string;
//begin
//  // TODO: Setup method call parameters
//  ReturnValue := FThreadSafeSingleton.ContainsToken(Token);
//  // TODO: Validate method results
//end;

procedure TestTThreadSafeSingleton.TestDUnit;
begin
  CheckTrue(True);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTThreadSafeSingleton.Suite);
end.

